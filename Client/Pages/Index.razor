@*FETCHES ALL EMPLOYEES FROM THE DATABASE*@
@page "/"
@inject HttpClient http
@inject HttpClient client
@inject NavigationManager uriHelper
@inject IJSRuntime js



<PageTitle>Software Engineering Project</PageTitle>

<h1>Welcome To Your PhoneBook</h1>

This <b><i>PHONEBOOK</i></b> holds the following departments:
<pre>
Click a <b>DEPARTMENT</b> below to filter or type in the box and press <b>ENTER</b>
Click <b>"RESET FILTER" </b>to clear the selection
</pre>

<pre>
   <a href="" target="" @onclick = "@(() => getIT())"><b>-IT</b></a>
  
   <a href="" target="" @onclick = "@(() => getMarketing())"><b>-MARKETING</b></a>

</pre>


If you wish to CRUD your phonebook, please select "<b>ADMIN PORTAL</b>"


@*Box TO SEARCH EMPLOYEE*@
<div class="form-group">
    <div class="row" style="width:250px">
        <label>FirstName</label>
        <input class="form-control" type="text" placeholder="FirstName search..."
               @bind="firstNameFilter"
               @bind:event="oninput"
               @onkeydown="@Enter">
    </div>

    <div class="row" style="width:250px">
        LastName
        <input class="form-control" type="text" placeholder="LastName search..."
               @bind="lastNameFilter"
               @bind:event="oninput"
               @onkeydown="@Enter">
    </div>

    <div class="row" style="width:250px">
        PhoneExt.
        <input class="form-control" type="text" placeholder="PhoneExt search..."
               @bind="phoneExtFilter"
               @bind:event="oninput"
               @onkeydown="@Enter">
    </div>

    <div class="row" style="width:250px">
        PhoneNumber
        <input class="form-control" type="text" placeholder="PhoneNumber search..."
               @bind="phoneFilter"
               @bind:event="oninput"
               @onkeydown="@Enter">
    </div>


    <div class="row" style="width:250px">
        MobilePhoneNumber
        <input class="form-control" type="text" placeholder="MobilePhoneNumber search..."
               @bind="mobilePhoneFilter"
               @bind:event="oninput"
               @onkeydown="@Enter">
    </div>

    <div class="row" style="width:250px">
        Department
        <input class="form-control" type="text" placeholder="Department search..."
               @bind="departmentFilter"
               @bind:event="oninput"
               @onkeydown="@Enter">

        <button type="button" class="btn btn-primary btn-sm" @onclick="@(() => GetEmployees())">Search</button>
        <button type="button" class="btn btn-secondary btn-sm"  @onclick = "@(() => ClearFilters())">Reset Filter</button>
    </div>
</div>


@*Formats and designs phone directory below*@
@if (employee == null)
{
    <text>Loading...</text>
}
else if (employee.Count == 0)
{
    <text>No Records Found.</text>
}
else
{
    <table class="table table-striped">
        <thead>
            <tr>
                @*<th>Id</th>*@
                @*<th>EmployeeId </th>*@
                <th>FirstName</th>
                <th>LastName</th>
                <th>EmployeeId </th>
                <th>Department</th>
                <th>JobTitle</th>
                @*<th>TitleRank</th>*@
                <th>Email</th>
                <th>PhoneNumber</th>
                <th>MobilePhoneNumber</th>
                <th>PhoneExtension</th>
                <th>Comments</th>
                <th></th>
            </tr>
        </thead>
        <tbody>
            @foreach (Employees emp in employee)@*ITERATION FOR NEW ROW FOR EACH EMPLOYEE RECORD*@
            {
                <tr>
                    @*<td>@emp.Id</td>*@
                    @*<td>@emp.EmployeeId </td>*@
                    <td>@emp.FirstName</td>
                    <td>@emp.LastName</td>
                    <td>@emp.EmployeeId </td>
                    <td>@emp.Department</td>
                    <td>@emp.JobTitle</td>
                    @*<td>@emp.TitleRank</td>*@
                    <td>@emp.Email</td>
                    <td>@emp.PhoneNumber</td>
                    <td>@emp.MobilePhoneNumber</td>
                    <td>@emp.PhoneExtension</td>
                    <td>@emp.Comments</td>
                    <td>
                    </td>
                </tr>

            }

        </tbody>
    </table>
}
@code
{
    //DEFINES LIST OF EMPLOYEES
    List<Employees> employee { get; set; }


    //Search Filtering
    public string firstNameFilter { get; set; }
    public string lastNameFilter { get; set; }
    public string phoneExtFilter { get; set; }
    public string phoneFilter { get; set; }
    public string mobilePhoneFilter { get; set; }
    public string departmentFilter { get; set; }


    protected override async Task OnInitializedAsync()  //FUNCTION THATS FIRED ON PAGE LOAD, USES HTTP CLIENT OBJECT TO RETRIEVE DATA FROM API ENDPOINT,
    {
        //"api/[Controller]: -> link: https://stackoverflow.com/questions/72275080/unhandled-exception-rendering-component-is-an-invalid-start-of-a-value
        //creates array of each entry in the Database for output

        //Ensures not NULL in search boxes
        await ClearFilters();
        await GetEmployees();
    }

    //Keyboard enter or numpad
    public async Task Enter(KeyboardEventArgs e)
    {
        //Remove 'if' for real time search BUT BUGS!
        if (e.Code == "Enter" || e.Code == "NumpadEnter")
        {
            await GetEmployees();
        }
    }

    //Department filters for hyperlinks
    async Task getIT()
    {
        await ClearFilters();
        departmentFilter = "IT";
        await GetEmployees();
    }

    async Task getMarketing()
    {
        await ClearFilters();
        departmentFilter = "MARKETING";
        await GetEmployees();

    }

    //Clears Filter boxes
    async Task ClearFilters()
    {
        firstNameFilter = "";
        lastNameFilter = "";
        phoneExtFilter = "";
        phoneFilter = "";
        mobilePhoneFilter = "";
        departmentFilter = "";
        await GetEmployees();
        
    }

    public async Task GetEmployees()
    {                                                                               

        employee = await client.GetFromJsonAsync<List<Employees>>($"api/PhoneBook/GetAllEmployees/?fName={firstNameFilter}&lName={lastNameFilter}&phoneExt={phoneExtFilter}&phone={phoneFilter}&mobilePhone={mobilePhoneFilter}&department={departmentFilter}");
    }


}